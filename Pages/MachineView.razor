@page "/{machine?}/{location?}"
@implements IDisposable
@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

<div class="card">
    <div class="card-header">
        @Machine - Online @cpuTemp
    </div>
    <div class="card-body">
        <h5 class="card-title">Special title treatment</h5>
        <p class="card-text">With supporting text below as a natural lead-in to additional content.</p>
        <a href="#" class="btn btn-primary">Go somewhere</a>
    </div>
</div>



@code {
    [Parameter]
    public string? Machine { get; set; }
    [Parameter]
    public string? Location { get; set; }
    private bool shouldRender;
    protected override bool ShouldRender() => shouldRender;
    private string cpuTemp = "0";

    protected override void OnInitialized()
    {
        Machine = Machine ?? "none";
        Location = Location ?? "";
        NavigationManager.LocationChanged += LocationChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        await getValue();
    }

    async void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        string navigationMethod = e.IsNavigationIntercepted ? "HTML" : "code";
        await getValue();
        Console.WriteLine($"Notified of navigation via {navigationMethod} to {e.Location}");
    }

    async Task getValue()
    {
        if (Location == null || Location.Length == 0)
        {
            shouldRender = true;
            return;
        }
        string request = $"http://{Location}:8080/cpu";
        HttpClient client = ClientFactory.CreateClient();
        HttpResponseMessage response = await client.GetAsync(request);
        if (response.IsSuccessStatusCode)
        {
            response.EnsureSuccessStatusCode();
            cpuTemp = await response.Content.ReadAsStringAsync();
            shouldRender = true;
        }
        else
        {
            Console.WriteLine("test2");
            shouldRender = true;
        }

    }

    void IDisposable.Dispose()
    {
        // Unsubscribe from the event when our component is disposed
        NavigationManager.LocationChanged -= LocationChanged;
    }

}