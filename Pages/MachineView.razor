@page "/{machine?}/{location?}/"
@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory

<PageTitle>Index</PageTitle>

<h1>
    @Machine
</h1>

<div class="card">
    <div class="card-header" style="color: green;">
        CPU Temp: @cpuTemp°C - @localIp
    </div>
    <div class="card-body">
        <p class="card-text">Os Info: @osInfo</p>
        <p class="card-text">Total Memory: @totalMemory</p>
        <p class="card-text">Available Memory: @availableMemory</p>
        <p class="card-text">Total Storage: @totalStorage GB</p>
        <p class="card-text">Available Storage: @availableStorage GB</p>
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Running processes TOP</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        @runningProcess
                    </td>
                </tr>
            </tbody>
        </table>
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Running processes PM2</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        @pm2Process
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>



@code {
    [Parameter]
    public string? Machine { get; set; }
    [Parameter]
    public string? Location { get; set; }
    private bool shouldRender;
    protected override bool ShouldRender() => shouldRender;
    private string cpuTemp = "0", osInfo = "", totalMemory = "", availableMemory = "", totalStorage = "", availableStorage =
    "",
    runningProcess = "", localIp = "", pm2Process = "";
    struct Sysvariable
    {
        public const string pm2 = "getPm2Process?index=";
        public const string top = "getProccessData?process=";
    }
    protected override void OnInitialized()
    {
        Machine = Machine ?? "none";
        Location = Location ?? "";
    }

    protected override async Task OnParametersSetAsync()
    {
        cpuTemp = await Task.Run(() => getSystemInfo("cpu"));
        totalMemory = await Task.Run(() => getSystemInfo("memTotal"));
        availableMemory = await Task.Run(() => getSystemInfo("memAvailable"));
        totalStorage = await Task.Run(() => getSystemInfo("totalStorage"));
        availableStorage = await Task.Run(() => getSystemInfo("availableStorage"));
        osInfo = await Task.Run(() => getSystemInfo("kernelInfo"));
        runningProcess = await Task.Run(() => getSystemProcess(Sysvariable.top, "./7Days"));
        pm2Process = await Task.Run(() => getSystemProcess(Sysvariable.pm2, "BopBot"));
        localIp = await Task.Run(() => getSystemInfo("./ip"));
        shouldRender = true;
    }

    async Task<string> getSystemInfo(string requestEndpoint)
    {
        string data = string.Empty;
        string request = $"http://{Location}:8080/{requestEndpoint}";
        HttpClient client = ClientFactory.CreateClient();
        HttpResponseMessage response = await client.GetAsync(request);
        if (response.IsSuccessStatusCode)
        {
            response.EnsureSuccessStatusCode();
            data = await response.Content.ReadAsStringAsync();
        }
        return data;
    }
    async Task<string> getSystemProcess(string processManager, string process)
    {
        string data = string.Empty;
        string request = $"http://{Location}:8080/{processManager}{process}";
        HttpClient client = ClientFactory.CreateClient();
        HttpResponseMessage response = await client.GetAsync(request);
        if (response.IsSuccessStatusCode)
        {
            response.EnsureSuccessStatusCode();
            data = await response.Content.ReadAsStringAsync();
        }
        return data;
    }


}