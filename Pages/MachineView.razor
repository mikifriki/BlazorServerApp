@page "/{machine?}/{location?}/"
@implements IDisposable
@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

<div class="card">
    <div class="card-header" style="color: green;">
        @Machine - Online @cpuTemp°C
    </div>
    <div class="card-body">
        <p class="card-text">Total Memory: @totalMemory</p>
        <p class="card-text">Available Memory: @availableMemory</p>
        <p class="card-text">Total Storage: @totalStorage GB</p>
        <p class="card-text">Available Storage: @availableStorage GB</p>
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Running processes</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td style="color: green;">
                        @runningProcess
                    </td>
                </tr>
            </tbody>


        </table>
    </div>
</div>



@code {
    [Parameter]
    public string? Machine { get; set; }
    [Parameter]
    public string? Location { get; set; }
    private bool shouldRender;
    protected override bool ShouldRender() => shouldRender;
    private string cpuTemp = "0", totalMemory = "", availableMemory = "", totalStorage = "", availableStorage = "",
    runningProcess = "";
    protected override void OnInitialized()
    {
        Machine = Machine ?? "none";
        Location = Location ?? "";
        NavigationManager.LocationChanged += LocationChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        cpuTemp = await Task.Run(() => getSystemInfo("cpu"));
        totalMemory = await Task.Run(() => getSystemInfo("memTotal"));
        availableMemory = await Task.Run(() => getSystemInfo("memAvailable"));
        totalStorage = await Task.Run(() => getSystemInfo("totalStorage"));
        availableStorage = await Task.Run(() => getSystemInfo("availableStorage"));
        runningProcess = await Task.Run(() => getSystemProcess("./7Days"));
        shouldRender = true;
    }

    async void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        string navigationMethod = e.IsNavigationIntercepted ? "HTML" : "code";
        Console.WriteLine($"Notified of navigation via {navigationMethod} to {e.Location}");
    }
    async Task<string> getSystemInfo(string requestEndpoint)
    {
        string data = string.Empty;
        string request = $"http://{Location}:8080/{requestEndpoint}";
        HttpClient client = ClientFactory.CreateClient();
        HttpResponseMessage response = await client.GetAsync(request);
        if (response.IsSuccessStatusCode)
        {
            response.EnsureSuccessStatusCode();
            data = await response.Content.ReadAsStringAsync();
        }
        return data;
    }
    async Task<string> getSystemProcess(string process)
    {
        string data = string.Empty;
        string request = $"http://{Location}:8080/getProccessData?process={process}";
        HttpClient client = ClientFactory.CreateClient();
        HttpResponseMessage response = await client.GetAsync(request);
        if (response.IsSuccessStatusCode)
        {
            response.EnsureSuccessStatusCode();
            data = await response.Content.ReadAsStringAsync();
        }
        return data;
    }

    void IDisposable.Dispose()
    {
        // Unsubscribe from the event when our component is disposed
        NavigationManager.LocationChanged -= LocationChanged;
    }

}