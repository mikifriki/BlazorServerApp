@using System.Text.Json
@using BlazorServerApp.Data
@inject IHttpClientFactory ClientFactory
@inject MachineService MachineService

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">BlazorServerApp</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        @foreach (Machine machine in machines)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="@($"{machine.MachineName}/{machine.MachineIp}")">
                    <span class="oi oi-home" aria-hidden="true"></span> @machine.MachineName
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {

    string baseurl = @"http://{0}:8080/status";
    protected override bool ShouldRender() => shouldRender;
    private List<Machine> machines = new List<Machine>();
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    private bool shouldRender;
    protected override async Task OnInitializedAsync()
    {
        string[] ips = await MachineService.GetMachines();
        foreach (string ip in ips)
        {
            Machine tempMachine = new Machine { MachineIp = ip };
            HttpClient client = ClientFactory.CreateClient();
            HttpResponseMessage response = await client.GetAsync(string.Format(baseurl, ip));
            response.EnsureSuccessStatusCode();
            tempMachine.MachineName = await response.Content.ReadAsStringAsync();
            machines.Add(tempMachine);
        }
        if (machines.Count != 0)
        {
            shouldRender = true;
        }
        else
        {
            shouldRender = false;
        }
    }
}
